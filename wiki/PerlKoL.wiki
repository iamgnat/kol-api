#summary KoL.pm

= Introduction =

This is the main module for the [KoLAPI KoLAPI]. It's purpose is to hold configuration and status information that is general to the API in general.

The end user of [KoLAPI KoLAPI] should not need to directly use this module.

<wiki:toc max_depth="3" />

=Exported Functions=

These functions are not directly connected to the [PerlKoL KoL] object.

===calledFrom($levels)===
This function generates a string representation of the calling function/method a number of levels back as specified by the _$levels_ value. The _$levels_ default value is 2 if not specified which is the caller of the function calling _calledFrom()_.

*Example return value:*

{{{main(main::testLogging)}}}

===promptUser($msg, $type, $default)===
This function interacts with the user via the TTY interface. It prompts the user with the _$prompt_ value, then verifies the supplied value against the _$type_ specified. If the response does not match the type, it will re-prompt them. If they supply no value (e.g. press enter) and a _$default_ value is supplied, the _$default_ value is returned. If there is an error, it returns _undef_ and sets _$@_.

*_$type_ values*:
|| *value* || *regex* || *Notes* ||
|| bool || `^[01YyTtNnFf]` || Boolean values ||
|| boolean || || See bool ||
|| int || `^-{0,1}\d+$` || Numeric (no decimals) values ||
|| integer || || See int ||
|| num || || See int ||
|| number || || See int ||
|| string || `.*` || String value (including empty string) ||
|| password || `.*` || Same as string, except that it turns echo off on the TTY when getting the answer from the user. ||

*Examples:*
{{{
print promptUser("Give me a int value:", 'int') . "\n";
print promptUser("Give me a bool value:", 'bool', 0) . "\n";
print promptUser("Give me a string value:", 'string', "you didn't give me a string") . "\n";
print promptUser("Give me a password value:", 'password') . "\n";
}}}

=Object=
The [PerlKoL KoL object] is meant to be used by other modules and not directly by the API users. It's purpose is to contain and manage configuration information that is common to all of the KoL project. Such things as servers to use, the API version, etc..

The [PerlKoL KoL object] is a singleton object so all calls will use the same instance. The reason for this is to facilitate communicating "system"-wide changes to all users of the object.

==Methods==
===new()===
This is the constructor of the object. If the singleton instance has not been created, it creates it. Once created (or if it already exists), it returns the singleton instance reference.

There are currently no arguments to this method.

*Example:*
{{{
my $kol = KoL->new();
}}}

===version()===
This method returns the version of the KoL API.

The method can actually be called as a function as it will create and use the singleton instance if it is not called as a method.

There are no arguments for this method.

*Method Example:*
{{{
my $kolVer = $kol->version();
}}}

*Function Example:*
{{{
my $kolVer = KoL::version();
}}}

===hosts()===
This method returns an array reference of the [http://www.kingdomofloathing.com KoL] servers that the KoL API is configured to use.

The method can actually be called as a function as it will create and use the singleton instance if it is not called as a method.

There are no arguments for this method.

*Method Example:*
{{{
my $hosts = $kol->hosts();
}}}

*Function Example:*
{{{
my $hosts = KoL::hosts();
}}}

===dirty()===
The _dirty()_ and _makeDirty()_ methods provide a modules to notify each other that they should update any cached information as a change has been made.

The _dirty()_ method returns the last UTC time (e.g. _time()_) that the _makeDirty()_ was called. Modules can use this result against their own saved UTC time to know if their last cache was before or after a known change to the character/environment information.

The method can actually be called as a function as it will create and use the singleton instance if it is not called as a method.

There are no arguments for this method.

*Method Example:*
{{{
if ($kol->dirty() > $myCachetime) {
    # Update cached information
}
# ...
}}}

*Function Example:*
{{{
if (KoL::dirty() > $myCachetime) {
    # Update cached information
}
# ...
}}}


===makeDirty()===
The _dirty()_ and _makeDirty()_ methods provide a modules to notify each other that they should update any cached information as a change has been made.

The _makeDirty()_ method sets a value in the object to the current UTC seconds (e.g. _time()). This value is then returned by a call to _dirty()_. 

The method can actually be called as a function as it will create and use the singleton instance if it is not called as a method.

There are no arguments for this method.

*Method Example:*
{{{
# Perform some action to change character information (e.g. sell an item)
$myCacheTime = time();
$kol->makeDirty();
}}}

*Function Example:*
{{{
# Perform some action to change character information (e.g. sell an item)
$myCacheTime = time();
KoL::makeDirty();
}}}